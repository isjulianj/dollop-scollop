#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var async = require('async');
var redis = require('redis');
var redisClient = redis.createClient(
  6379,
  'dollop-scollop.redis.cache.windows.net',
  {
    auth_pass: 'OXPysj73RzCOqaxaczbzOTgOQcNELroChnzmvRO2kH4='
  }
);

/**
 * Get Helper Functions.
 */

var setIntervalX = require('../public/javascripts/helpers').setIntervalX;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var connectedUsers = 0;

io.on('connection', newConnection);

function newConnection(socket) {
  console.log('New connection ' + socket.id);
  var colour = '#' + (((1 << 24) * Math.random()) | 0).toString(16);
  socket.emit('colour', colour);
  connectedUsers++;
  redisClient.keys('*', (err, keys) => {
    if (err) return console.log(err);
    if (keys) {
      async.map(
        keys,
        function(key, cb) {
          redisClient.get(key, (error, result) => {
            if (error) {
              console.log(error);
              throw error;
            }
            cb(null, result);
          });
        },
        function(error, results) {
          if (error) return console.log(error);

          socket.emit('newCanvas', results);
        }
      );
    }
    // console.log(newCanvas);
  });

  function flushRedis() {
    redisClient.flushdb(function(err, succeeded) {
      if (err) return;
      console.log('Redis clearing status: ', succeeded); // will be true if successfull
    });
  }
  function clearCanvas() {
    socket.emit('clearRect', 'clearRect');
  }

  setIntervalX(
    () => {
      async.parallel(
        [
          function(callback) {
            clearCanvas();
            console.log('here clearing canvas');
          },
          function(callback) {
            flushRedis();
            console.log('here flushing redis');
          }
        ],
        function(err, results) {
          console.log('results', results);
        }
      );
    },
    60000,
    -1
  );

  socket.on('mouse', mouseMsg);
  socket.broudcast;
  socket.on('disconnect', reason => {
    connectedUsers--;
    console.log(connectedUsers);
    console.log(reason);
  });

  function mouseMsg(data) {
    socket.broadcast.emit('mouse', data);

    redisClient.set(
      `${new Date().getTime()}_canvasData`,
      JSON.stringify(data),
      redis.print
    );
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
